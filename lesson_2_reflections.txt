What happens when you initialize a repository? Why do you need to do it?

	When I use a git init command in a directory, then I've create a empty repository, and there is a directory that named .git. 
	Because I want to built a repository for tracking some files in this directory.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	Staging area sets a intermediary area for git can commit these files in it, other than all files in working directory. And the staging area can check out these files that need to commit.
	I think that it helps us to verify these files that need to commit through the git status command. Avoiding submit the incorrect files into a commit.

How can you use the staging area to make sure you have one commit per logical
change?

	For multiple changes, I'll just add these files about one logical change use the git add command at every commit. Then repeat these actions until all changes be submited.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	When I need to take a experimental change or make a another version, and keep the current version intact.

How do the diagrams help you visualize the branch structure?

	First, use the git branch command, list all branches of the repository. And checkout these branches one by one, then I can draw the diagram through using the git log --graph --oneline. 

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
